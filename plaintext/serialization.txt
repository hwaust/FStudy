Serialization

http://docs.basex.org/wiki/Serialization

fn:serialize($arg as item()*) as xs:string

xml, xhtml, html, text, json, adaptive, csv, basex


basex is used as the default serialization method: nodes are serialized as XML,
atomic values are serialized as string, and items of binary type are output in
their native byte representation. Function items (including maps and arrays) are
output just like with the adaptive method.

csv allows you to output XML nodes as CSV data (see the CSV Module for more
details).




----------------------------- Test1 -----------------------------
declare option output:method '$mode';
for $node in db:open('xmark10')//keyword
  return $node

xml: execution time: 4422.00 ms, results.length() = 47650 KiB.
xhtml: execution time: 4266.40 ms, results.length() = 47650 KiB.
html: execution time: 4475.50 ms, results.length() = 47650 KiB.
text: execution time: 3811.30 ms, results.length() = 32169 KiB.
failed to finish json
adaptive: execution time: 4443.70 ms, results.length() = 47650 KiB.
csv: execution time: 2969.00 ms, results.length() = 157 KiB.
basex: execution time: 4461.20 ms, results.length() = 47650 KiB.

----------------------------- Test2 -----------------------------
declare option output:method '$mode';
for $node in db:open('xmark10')//keyword
  return (db:open-pre($node), $node)

xml: execution time: 4739.20 ms, results.length() = 51381 KiB.
xhtml: execution time: 4569.50 ms, results.length() = 51381 KiB.
html: execution time: 4770.60 ms, results.length() = 51381 KiB.
adaptive: execution time: 4914.90 ms, results.length() = 54133 KiB.
basex: execution time: 4814.40 ms, results.length() = 54133 KiB.




----------------------------- Test3 -----------------------------
declare option output:method '$mode';
for $node in db:open('xmark10')//keyword
  return (('', db:node-pre($node)), $node)

xml: execution time: 5081.90 ms, results.length() = 52069 KiB.
xhtml: execution time: 4673.40 ms, results.length() = 52069 KiB.
html: execution time: 4878.90 ms, results.length() = 52069 KiB.
basex: execution time: 4939.50 ms, results.length() = 55509 KiB.






static void test3() throws Exception {
	BXClient bx = BXClient.open("localhost");
	String[] modes = { "xml", "xhtml", "html", "basex" };

	for (String mode : modes) {

		try {
			String query = "xquery declare option output:method '" + mode
					+ "';  for $node in db:open('xmark10')//keyword  return (('', db:node-pre($node)), $node)";
			bx.execute(query);
			double total = 0;
			long size = 0;
			for (int i = 0; i < 10; i++) {
				long t1 = System.currentTimeMillis();
				size = bx.execute(query).length();
				long t2 = System.currentTimeMillis();
				total += t2 - t1;
			}
			System.out.printf("%s: execution time: %.2f ms, results.length() = %d KiB.\n", mode, total / 10,
					size / 1024);
		} catch (Exception ex) {
			System.out.println("failed to finish " + mode);
		}

	}
	bx.close();

}

static void test2() throws Exception {
	BXClient bx = BXClient.open("localhost");
	String[] modes = { "xml", "xhtml", "html", "adaptive", "basex" };

	for (String mode : modes) {

		try {
			String query = "xquery declare option output:method '" + mode
					+ "';  for $node in db:open('xmark10')//keyword  return (db:node-pre($node), $node)";
			bx.execute(query);
			double total = 0;
			long size = 0;
			for (int i = 0; i < 10; i++) {
				long t1 = System.currentTimeMillis();
				size = bx.execute(query).length();
				long t2 = System.currentTimeMillis();
				total += t2 - t1;
			}
			System.out.printf("%s: execution time: %.2f ms, results.length() = %d KiB.\n", mode, total / 10,
					size / 1024);
		} catch (Exception ex) {
			System.out.println("failed to finish " + mode);
		}

	}
	bx.close();
}

static void test1() throws Exception {
	BXClient bx = BXClient.open("localhost");
	String[] modes = { "xml", "xhtml", "html", "text", "json", "adaptive", "csv", "basex" };
	for (String mode : modes) {
		try {
			String query = "xquery declare option output:method '" + mode
					+ "';  for $node in db:open('xmark10')//keyword  return $node";
			bx.execute(query);
			double total = 0;
			long size = 0;
			for (int i = 0; i < 10; i++) {
				long t1 = System.currentTimeMillis();
				size = bx.execute(query).length();
				long t2 = System.currentTimeMillis();
				total += t2 - t1;
			}
			System.out.printf("%s: execution time: %.2f ms, results.length() = %d KiB.\n", mode, total / 10,
					size / 1024);
		} catch (Exception ex) {
			System.out.println("failed to finish " + mode);
		}
	}
	bx.close();
}
