
From XSLT and XQuery Serialization 3.1 [1], I found that in adaptive
mode, items are serialized by their types. This type recogonition
brings an overhead the serialization. For the XML mode, serializes the
normalized sequence as an XML entity that MUST satisfy the rules for a
well-formed XML document. Since the results of prefix meet the
requriement of XML mode, the XML mode should be the fastest mode.
I then did the experiment to prove that.

In basex, serialization has eight modes: xml, xhtml, html, basex,
adaptive, csv, text, json. Only the first five modes return the
results that meet our requriement. I then did the following query
100 times on XMark10.

-------------------- query ---------------------------
for $node in db:open('xmark10')//keyword
  return (db:open-pre($node), $node)
-------------------- Results --------------------------
mode     execution time  results.length    
xml         4914.38 ms     51381 KiB.
xhtml       5137.99 ms     51381 KiB.
html        5155.35 ms     51381 KiB.
adaptive    5157.89 ms     54133 KiB.
basex       5065.90 ms     54133 KiB.
-------------------------------------------------------

The results show that using XML mode is the fastest way. Thus,
I will use XML mode for serialization in the experiment.




[1] XSLT and XQuery Serialization 3.1,
https://www.w3.org/TR/xslt-xquery-serialization-31/



----------------------------- Test1 -----------------------------
declare option output:method '$mode';
for $node in db:open('xmark10')//keyword
  return $node

xml: 4422.00 ms, results.length() = 47650 KiB.
xhtml: 4266.40 ms, results.length() = 47650 KiB.
html: 4475.50 ms, results.length() = 47650 KiB.
text: 3811.30 ms, results.length() = 32169 KiB.
failed to finish json
adaptive: 4443.70 ms, results.length() = 47650 KiB.
csv: 2969.00 ms, results.length() = 157 KiB.
basex: 4461.20 ms, results.length() = 47650 KiB.

----------------------------- Test2 -----------------------------
declare option output:method '$mode';

for $node in db:open('xmark10')//keyword
  return (db:open-pre($node), $node)

10x run 1st
xml      4739.20 ms, results.length() = 51381 KiB.
xhtml    4569.50 ms, results.length() = 51381 KiB.
html     4770.60 ms, results.length() = 51381 KiB.
adaptive 4914.90 ms, results.length() = 54133 KiB.
basex    4814.40 ms, results.length() = 54133 KiB.

10x run 2nd
xml      4868.00 ms, results.length() = 51381 KiB.
xhtml    4831.60 ms, results.length() = 51381 KiB.
html     5176.30 ms, results.length() = 51381 KiB.
adaptive 5066.60 ms, results.length() = 54133 KiB.
basex    4900.70 ms, results.length() = 54133 KiB.


100x run 1st
xml      4914.38 ms, results.length() = 51381 KiB.
xhtml    5137.99 ms, results.length() = 51381 KiB.
html     5155.35 ms, results.length() = 51381 KiB.
adaptive 5157.89 ms, results.length() = 54133 KiB.
basex    5065.90 ms, results.length() = 54133 KiB.


----------------------------- Test3 -----------------------------
declare option output:method '$mode';
for $node in db:open('xmark10')//keyword
  return (('', db:node-pre($node)), $node)

xml: 5081.90 ms, results.length() = 52069 KiB.
xhtml: 4673.40 ms, results.length() = 52069 KiB.
html: 4878.90 ms, results.length() = 52069 KiB.
basex: 4939.50 ms, results.length() = 55509 KiB.






static void test3() throws Exception {
	BXClient bx = BXClient.open("localhost");
	String[] modes = { "xml", "xhtml", "html", "basex" };

	for (String mode : modes) {

		try {
			String query = "xquery declare option output:method '" + mode
					+ "';  for $node in db:open('xmark10')//keyword  return (('', db:node-pre($node)), $node)";
			bx.execute(query);
			double total = 0;
			long size = 0;
			for (int i = 0; i < 10; i++) {
				long t1 = System.currentTimeMillis();
				size = bx.execute(query).length();
				long t2 = System.currentTimeMillis();
				total += t2 - t1;
			}
			System.out.printf("%s: %.2f ms, results.length() = %d KiB.\n", mode, total / 10,
					size / 1024);
		} catch (Exception ex) {
			System.out.println("failed to finish " + mode);
		}

	}
	bx.close();

}

static void test2() throws Exception {
	BXClient bx = BXClient.open("localhost");
	String[] modes = { "xml", "xhtml", "html", "adaptive", "basex" };

	for (String mode : modes) {

		try {
			String query = "xquery declare option output:method '" + mode
					+ "';  for $node in db:open('xmark10')//keyword  return (db:node-pre($node), $node)";
			bx.execute(query);
			double total = 0;
			long size = 0;
			for (int i = 0; i < 10; i++) {
				long t1 = System.currentTimeMillis();
				size = bx.execute(query).length();
				long t2 = System.currentTimeMillis();
				total += t2 - t1;
			}
			System.out.printf("%s: %.2f ms, results.length() = %d KiB.\n", mode, total / 10,
					size / 1024);
		} catch (Exception ex) {
			System.out.println("failed to finish " + mode);
		}

	}
	bx.close();
}

static void test1() throws Exception {
	BXClient bx = BXClient.open("localhost");
	String[] modes = { "xml", "xhtml", "html", "text", "json", "adaptive", "csv", "basex" };
	for (String mode : modes) {
		try {
			String query = "xquery declare option output:method '" + mode
					+ "';  for $node in db:open('xmark10')//keyword  return $node";
			bx.execute(query);
			double total = 0;
			long size = 0;
			for (int i = 0; i < 10; i++) {
				long t1 = System.currentTimeMillis();
				size = bx.execute(query).length();
				long t2 = System.currentTimeMillis();
				total += t2 - t1;
			}
			System.out.printf("%s: %.2f ms, results.length() = %d KiB.\n", mode, total / 10,
					size / 1024);
		} catch (Exception ex) {
			System.out.println("failed to finish " + mode);
		}
	}
	bx.close();
}
